{"version":3,"sources":["Components/Operations.js","Components/CardOperation.js","Components/Answer.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["createOperation","_ref","symbol","evaluation","dif","key","answer","param","Array","fill","map","difficulty","Math","ceil","random","sort","a","b","apply","Object","toConsumableArray","Operation","_ref2","multiplication","this","operations","method","methods","keys","randomKey","floor","length","selectRandomMethod","division","sum","sub","cardSize","minHeight","CardOpertation","props","style","localHeight","movingDown","totalHeight","operationCards","op","pos","texContent","concat","modif","console","log","color","height","fontSize","transition","transform","react_default","createElement","className","containerStyle","Answer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","e","setState","target","onSuccess","type","onChange","Component","maxOperations","Game","initialOperations","_","i","generateOperation","createNewOperation","keyCounter","activeOperation","delay","_this$state","slice","_this2","_this$state2","setTimeout","CardOperation","Components_Answer","toString","App","Components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAIA,SAASA,EAATC,GAAiD,IAAtBC,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,WAC/B,OAAO,SAACC,EAAKC,GACT,IAAIC,EAAQC,EACZ,GACIA,EAAQC,MAAM,GACTC,KAAK,MACLC,IAAI,kBAVGC,EAUkBP,EAT/BQ,KAAKC,KAAqB,EAAhBD,KAAKE,SAAeH,GAAc,EADvD,IAAwBA,IAWPI,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,IACxBV,EAASH,EAAUe,WAAV,EAAAC,OAAAC,EAAA,EAAAD,CAAcZ,UACjBD,EAAS,GAAM,GACzB,MAAO,CAAEJ,OAAQA,EAAQK,MAAOA,EAAOD,OAAQA,EAAQD,IAAKA,QAU9DgB,oHAmBqC,IAAZhB,EAAYiB,EAAZjB,IAAKD,EAAOkB,EAAPlB,IACtBmB,EAAmBC,KAAKC,WAAxBF,eACFG,EA3BZ,SAA4BC,GACxB,IAAIC,EAAOT,OAAOS,KAAKD,GACnBE,EAAYjB,KAAKkB,MAAMlB,KAAKE,SAAWc,EAAKG,QAEhD,OADcF,IAAcD,EAAKG,OAAUJ,EAAQC,EAAK,IAAMD,EAAQC,EAAKC,IAwB1DG,CAAmBR,KAAKC,YAIrC,OAHIC,GAAUH,IACVnB,GAAY,GACAsB,EAAOtB,EAAKC,YAxB9BgB,EACKI,WAAa,CAChBQ,SAAUjC,EAAgB,CACtBE,OAAQ,IACRC,WAAY,SAACa,EAAGC,GAAJ,OAAUD,EAAIC,KAE9BM,eAAgBvB,EAAgB,CAC5BE,OAAQ,IACRC,WAAY,SAACa,EAAGC,GAAJ,OAAUD,EAAIC,KAE9BiB,IAAKlC,EAAgB,CACjBE,OAAQ,IACRC,WAAY,SAACa,EAAGC,GAAJ,OAAUD,EAAIC,KAE9BkB,IAAKnC,EAAgB,CACjBE,OAAQ,IACRC,WAAY,SAACa,EAAGC,GAAJ,OAAUD,EAAIC,MAcvBI,QCnDTe,EAAW,IACXC,EAAY,GAiDHC,MA/Cf,SAAwBC,GAAO,IAEvBC,EAAOC,EADLhB,EAA2Bc,EAA3Bd,WAAYiB,EAAeH,EAAfG,WACMC,EAAc,EAClCC,EAAiBnB,EAAWf,IAAI,SAACmC,EAAIC,GAAQ,IACvC5C,EAAuB2C,EAAvB3C,OAAQK,EAAesC,EAAftC,MAAOF,EAAQwC,EAARxC,IACjB0C,EAAU,GAAAC,OAAMzC,EAAM,GAAZ,KAAAyC,OAAkB9C,EAAlB,KAAA8C,OAA4BzC,EAAM,IAEhD,GADAoC,GAAeP,EAAWU,GAAOrB,EAAWM,OAAS,GAAKM,EACtDK,EAAY,CACZ,IAAIO,GAASH,EAAM,IAAMrB,EAAWM,OAAS,GAC7CU,EAAcL,EAAWa,EAAQZ,EACjCa,QAAQC,IAAIR,GACZH,EAAQ,CACJY,MAAK,oBAAAJ,OAA8B,IAARC,EAAc,IAApC,KACLI,OAAM,GAAAL,OAAKP,EAAL,MACNa,SAAQ,GAAAN,OAAa,EAARC,EAAY,GAAjB,MACRM,WAAY,UACZC,UAAS,qBAEV,CACH,IAAIP,EAAQH,GAAOrB,EAAWM,OAAS,GACvCU,EAAcL,EAAWa,EAAQZ,EACjCG,EAAQ,CACJY,MAAK,oBAAAJ,OAA8B,IAARC,EAAc,IAApC,KACLI,OAAM,GAAAL,OAAKP,EAAL,MACNa,SAAQ,GAAAN,OAAa,EAARC,EAAY,GAAjB,MACRM,WAAU,OACVC,UAAS,eAAAR,OAAiBX,EAAjB,QAIjB,OACIoB,EAAAzC,EAAA0C,cAAA,OAAKC,UAAU,OAAOtD,IAAKA,EAAKmC,MAAOA,GACnCiB,EAAAzC,EAAA0C,cAAA,YAAOX,MAIfa,EAAiB,CACjBP,OAAM,GAAAL,OAAKL,EAAL,OAEV,OACIc,EAAAzC,EAAA0C,cAAA,OAAKC,UAAU,gBAAgBnB,MAAOoB,GACjChB,IClBEiB,cA1BX,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAA3C,OAAA4C,EAAA,EAAA5C,CAAAK,KAAAqC,IACfC,EAAA3C,OAAA6C,EAAA,EAAA7C,CAAAK,KAAAL,OAAA8C,EAAA,EAAA9C,CAAA0C,GAAAK,KAAA1C,KAAMe,KACD4B,MAAQ,CACTC,MAAO,GACP9D,OAAQwD,EAAKvB,MAAMjC,QAEvBwD,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBnD,OAAAoD,EAAA,EAAApD,CAAA2C,IANLA,4EAQNU,GACThD,KAAKiD,SAAS,CACVL,MAAOI,EAAEE,OAAON,QAEhBI,EAAEE,OAAON,QAAU5C,KAAKe,MAAMjC,SAC9BkB,KAAKe,MAAMoC,YACXnD,KAAKiD,SAAS,CACVL,MAAO,uCAKf,OACIX,EAAAzC,EAAA0C,cAAA,SAAOC,UAAW,cAAeiB,KAAK,OAAOR,MAAO5C,KAAK2C,MAAMC,MAAOS,SAAUrD,KAAK6C,sBAtB5ES,aCGfC,EAAgB,EAqDPC,cAlDX,SAAAA,EAAYzC,GAAO,IAAAuB,EAAA3C,OAAA4C,EAAA,EAAA5C,CAAAK,KAAAwD,GACflB,EAAA3C,OAAA6C,EAAA,EAAA7C,CAAAK,KAAAL,OAAA8C,EAAA,EAAA9C,CAAA6D,GAAAd,KAAA1C,KAAMe,IACN,IAAI0C,EAAoBzE,MAAMuE,GAAetE,KAAK,MAAMC,IAAI,SAACwE,EAAGC,GAAJ,OAAU9D,EAAU+D,kBAAkB,CAAE/E,IAAK8E,EAAG/E,IAAK,MAFlG,OAGf0D,EAAKa,UAAYb,EAAKa,UAAUL,KAAfnD,OAAAoD,EAAA,EAAApD,CAAA2C,IACjBA,EAAKuB,mBAAqBvB,EAAKuB,mBAAmBf,KAAxBnD,OAAAoD,EAAA,EAAApD,CAAA2C,IAC1BA,EAAKK,MAAQ,CACT1C,WAAYwD,EACZK,WAAYL,EAAkBlD,OAC9BW,YAAY,EACZtC,IAAK,EACLmF,gBAAiBN,EAAkBA,EAAkBlD,OAAS,GAC9DyD,MAAO,GAXI1B,oFAeE,IAAA2B,EACgBjE,KAAK2C,MAAhCqB,EADWC,EACXD,MAAOF,EADIG,EACJH,WAAYlF,EADRqF,EACQrF,IAErBqB,EAAa,CADEJ,EAAU+D,kBAAkB,CAAE/E,IAAKmB,KAAK2C,MAAMmB,WAAYlF,IAAKoB,KAAK2C,MAAM/D,OAC5E4C,OAAA7B,OAAAC,EAAA,EAAAD,CAAkBK,KAAK2C,MAAM1C,aAAYiE,MAAM,EAAGX,GACnEvD,KAAKiD,SAAS,CACVhD,WAAYA,EACZ6D,WAAYA,EAAa,EACzB5C,YAAY,EACZtC,IAAKA,EAAM,GACXoF,MAAOA,EAAQ,wCAGX,IAAAG,EAAAnE,KAAAoE,EACoBpE,KAAK2C,MAA3B1C,EADEmE,EACFnE,WAAY+D,EADVI,EACUJ,MAClBhE,KAAKiD,SAAS,CACV/B,YAAY,EACZ6C,gBAAiB9D,EAAWA,EAAWM,OAASyD,EAAQ,GACxDA,MAAOA,EAAQ,IAEnBK,WAAW,WACPF,EAAKN,sBACN,sCAIoB7D,KAAK2C,MAApB1C,WACR,OACIgC,EAAAzC,EAAA0C,cAAA,OAAKC,UAAW,iBACZF,EAAAzC,EAAA0C,cAAA,kBACAD,EAAAzC,EAAA0C,cAACoC,EAAD,CAAerE,WAAYD,KAAK2C,MAAM1C,WAAYiB,WAAYlB,KAAK2C,MAAMzB,aACzEe,EAAAzC,EAAA0C,cAACqC,EAAD,CAAQzF,OAAQkB,KAAK2C,MAAMoB,gBAAgBjF,OAAO0F,WAAYrB,UAAWnD,KAAKmD,oBA9C3EG,aCMJmB,MARf,WACE,OACExC,EAAAzC,EAAA0C,cAAA,OAAKC,UAAU,OACXF,EAAAzC,EAAA0C,cAACwC,EAAD,QCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAzC,EAAA0C,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f5875627.chunk.js","sourcesContent":["function generateNumber(difficulty) {\r\n    return Math.ceil(Math.random() * 5 * difficulty) + 1;\r\n}\r\n\r\nfunction createOperation({ symbol, evaluation }) {\r\n    return (dif, key) => {\r\n        let answer, param;\r\n        do {\r\n            param = Array(2)\r\n                .fill(null)\r\n                .map(() => generateNumber(dif))\r\n                .sort((a, b) => b - a);\r\n            answer = evaluation(...param);\r\n        } while ((answer % 1) != 0);\r\n        return { symbol: symbol, param: param, answer: answer, key: key }\r\n    }\r\n}\r\n\r\nfunction selectRandomMethod(methods) {\r\n    let keys = Object.keys(methods);\r\n    let randomKey = Math.floor(Math.random() * keys.length)\r\n    let method = (randomKey === keys.length) ? methods[keys[0]] : methods[keys[randomKey]];\r\n    return method;\r\n}\r\nclass Operation {\r\n    static operations = {\r\n        division: createOperation({\r\n            symbol: '/',\r\n            evaluation: (a, b) => a / b\r\n        }),\r\n        multiplication: createOperation({\r\n            symbol: '*',\r\n            evaluation: (a, b) => a * b\r\n        }),\r\n        sum: createOperation({\r\n            symbol: '+',\r\n            evaluation: (a, b) => a + b\r\n        }),\r\n        sub: createOperation({\r\n            symbol: '-',\r\n            evaluation: (a, b) => a - b\r\n        })\r\n    }\r\n    static generateOperation({ key, dif }) {\r\n        let { multiplication } = this.operations;\r\n        let method = selectRandomMethod(this.operations);\r\n        if (method == multiplication)\r\n            dif = dif / 2;\r\n        let operation = method(dif, key);\r\n        return operation;\r\n    }\r\n}\r\n\r\n\r\nexport default Operation","import React from 'react'\r\n\r\n\r\nconst cardSize = 100;\r\nconst minHeight = 20;\r\n\r\nfunction CardOpertation(props) {\r\n    let { operations, movingDown } = props;\r\n    let style, localHeight, totalHeight = 0;\r\n    let operationCards = operations.map((op, pos) => {\r\n        let { symbol, param, key } = op;\r\n        let texContent = `${param[0]} ${symbol} ${param[1]}`;\r\n        totalHeight += cardSize * pos / (operations.length - 1) + minHeight;\r\n        if (movingDown) {\r\n            let modif = (pos + 1) / (operations.length - 1);\r\n            localHeight = cardSize * modif + minHeight;\r\n            console.log(totalHeight)\r\n            style = {\r\n                color: `rgba(255,255,255,${modif * .85 + .15})`,\r\n                height: `${localHeight}px`,\r\n                fontSize: `${modif * 2 + .2}em`,\r\n                transition: 'all .2s',\r\n                transform: `translateY(0)`\r\n            }\r\n        } else {\r\n            let modif = pos / (operations.length - 1)\r\n            localHeight = cardSize * modif + minHeight;\r\n            style = {\r\n                color: `rgba(255,255,255,${modif * .85 + .15})`,\r\n                height: `${localHeight}px`,\r\n                fontSize: `${modif * 2 + .2}em`,\r\n                transition: `none`,\r\n                transform: `translateY(-${minHeight}px)`\r\n            }\r\n\r\n        }\r\n        return (\r\n            <div className='card' key={key} style={style}>\r\n                <span>{texContent}</span>\r\n            </div>\r\n        )\r\n    })\r\n    let containerStyle = {\r\n        height: `${totalHeight}px`\r\n    }\r\n    return (\r\n        <div className='cardContainer' style={containerStyle} >\r\n            {operationCards}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CardOpertation","import React, { Component } from 'react'\r\n\r\nclass Answer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            answer: this.props.answer\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n        if (e.target.value === this.props.answer) {\r\n            this.props.onSuccess();\r\n            this.setState({\r\n                value: ''\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <input className={'inputAnswer'} type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Answer","import React, { Component } from 'react';\r\nimport Operation from './Operations';\r\nimport CardOperation from './CardOperation'\r\nimport Answer from './Answer'\r\n\r\nconst maxOperations = 6;\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let initialOperations = Array(maxOperations).fill(null).map((_, i) => Operation.generateOperation({ key: i, dif: 1 }));\r\n        this.onSuccess = this.onSuccess.bind(this);\r\n        this.createNewOperation = this.createNewOperation.bind(this);\r\n        this.state = {\r\n            operations: initialOperations,\r\n            keyCounter: initialOperations.length,\r\n            movingDown: false,\r\n            dif: 1,\r\n            activeOperation: initialOperations[initialOperations.length - 1],\r\n            delay: 1\r\n\r\n        }\r\n    }\r\n    createNewOperation() {\r\n        let { delay, keyCounter, dif } = this.state;\r\n        let newOperation = Operation.generateOperation({ key: this.state.keyCounter, dif: this.state.dif });\r\n        let operations = [newOperation, ...this.state.operations].slice(0, maxOperations);\r\n        this.setState({\r\n            operations: operations,\r\n            keyCounter: keyCounter + 1,\r\n            movingDown: false,\r\n            dif: dif + 0.2,\r\n            delay: delay - 1\r\n        })\r\n    }\r\n    onSuccess() {\r\n        let { operations, delay } = this.state;\r\n        this.setState({\r\n            movingDown: true,\r\n            activeOperation: operations[operations.length - delay - 1],\r\n            delay: delay + 1\r\n        })\r\n        setTimeout(() => {\r\n            this.createNewOperation()\r\n        }, 200);\r\n    }\r\n\r\n    render() {\r\n        const { operations } = this.state;\r\n        return (\r\n            <div className={'gameContainer'}>\r\n                <p>Juego</p>\r\n                <CardOperation operations={this.state.operations} movingDown={this.state.movingDown} />\r\n                <Answer answer={this.state.activeOperation.answer.toString()} onSuccess={this.onSuccess} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Game","import React from 'react';\nimport Game from './Components/Game';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}